// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

use super::break_block_packet::BreakBlockPacket;
#[allow(unused)]
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct HandleBreakBlockArgs {
    pub entity_id: u32,
    pub packet: BreakBlockPacket,
}

impl Reducer for HandleBreakBlockArgs {
    const REDUCER_NAME: &'static str = "handle_break_block";
}

#[allow(unused)]
pub fn handle_break_block(entity_id: u32, packet: BreakBlockPacket) {
    HandleBreakBlockArgs { entity_id, packet }.invoke();
}

#[allow(unused)]
pub fn on_handle_break_block(
    mut __callback: impl FnMut(&Identity, Option<Address>, &Status, &u32, &BreakBlockPacket)
        + Send
        + 'static,
) -> ReducerCallbackId<HandleBreakBlockArgs> {
    HandleBreakBlockArgs::on_reducer(move |__identity, __addr, __status, __args| {
        let HandleBreakBlockArgs { entity_id, packet } = __args;
        __callback(__identity, __addr, __status, entity_id, packet);
    })
}

#[allow(unused)]
pub fn once_on_handle_break_block(
    __callback: impl FnOnce(&Identity, Option<Address>, &Status, &u32, &BreakBlockPacket)
        + Send
        + 'static,
) -> ReducerCallbackId<HandleBreakBlockArgs> {
    HandleBreakBlockArgs::once_on_reducer(move |__identity, __addr, __status, __args| {
        let HandleBreakBlockArgs { entity_id, packet } = __args;
        __callback(__identity, __addr, __status, entity_id, packet);
    })
}

#[allow(unused)]
pub fn remove_on_handle_break_block(id: ReducerCallbackId<HandleBreakBlockArgs>) {
    HandleBreakBlockArgs::remove_on_reducer(id);
}
