// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

use super::tick_mode::TickMode;
#[allow(unused)]
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct StdbServerWorldState {
    pub world_id: i32,
    pub name: String,
    pub seed: i64,
    pub time: u64,
    pub tick_mode: TickMode,
    pub tick_mode_manual: u32,
}

impl TableType for StdbServerWorldState {
    const TABLE_NAME: &'static str = "StdbServerWorldState";
    type ReducerEvent = super::ReducerEvent;
}

impl TableWithPrimaryKey for StdbServerWorldState {
    type PrimaryKey = i32;
    fn primary_key(&self) -> &Self::PrimaryKey {
        &self.world_id
    }
}

impl StdbServerWorldState {
    #[allow(unused)]
    pub fn filter_by_world_id(world_id: i32) -> Option<Self> {
        Self::find(|row| row.world_id == world_id)
    }
    #[allow(unused)]
    pub fn filter_by_name(name: String) -> TableIter<Self> {
        Self::filter(|row| row.name == name)
    }
    #[allow(unused)]
    pub fn filter_by_seed(seed: i64) -> TableIter<Self> {
        Self::filter(|row| row.seed == seed)
    }
    #[allow(unused)]
    pub fn filter_by_time(time: u64) -> TableIter<Self> {
        Self::filter(|row| row.time == time)
    }
    #[allow(unused)]
    pub fn filter_by_tick_mode(tick_mode: TickMode) -> TableIter<Self> {
        Self::filter(|row| row.tick_mode == tick_mode)
    }
    #[allow(unused)]
    pub fn filter_by_tick_mode_manual(tick_mode_manual: u32) -> TableIter<Self> {
        Self::filter(|row| row.tick_mode_manual == tick_mode_manual)
    }
}
