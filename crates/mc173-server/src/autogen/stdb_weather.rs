// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused_imports)]
use super::weather::Weather;
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct StdbWeather {
    pub dimension_id: i32,
    pub weather_next_time: u64,
    pub weather: Weather,
}

impl TableType for StdbWeather {
    const TABLE_NAME: &'static str = "StdbWeather";
    type ReducerEvent = super::ReducerEvent;
}

impl TableWithPrimaryKey for StdbWeather {
    type PrimaryKey = i32;
    fn primary_key(&self) -> &Self::PrimaryKey {
        &self.dimension_id
    }
}

impl StdbWeather {
    #[allow(unused)]
    pub fn filter_by_dimension_id(dimension_id: i32) -> TableIter<Self> {
        Self::filter(|row| row.dimension_id == dimension_id)
    }
    #[allow(unused)]
    pub fn find_by_dimension_id(dimension_id: i32) -> Option<Self> {
        Self::find(|row| row.dimension_id == dimension_id)
    }
    #[allow(unused)]
    pub fn filter_by_weather_next_time(weather_next_time: u64) -> TableIter<Self> {
        Self::filter(|row| row.weather_next_time == weather_next_time)
    }
}
